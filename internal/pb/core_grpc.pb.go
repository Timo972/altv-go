// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: src/core.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestAPIClient is the client API for TestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAPIClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRes, error)
}

type testAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAPIClient(cc grpc.ClientConnInterface) TestAPIClient {
	return &testAPIClient{cc}
}

func (c *testAPIClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRes, error) {
	out := new(HelloRes)
	err := c.cc.Invoke(ctx, "/Core.TestAPI/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServer is the server API for TestAPI service.
// All implementations must embed UnimplementedTestAPIServer
// for forward compatibility
type TestAPIServer interface {
	Hello(context.Context, *HelloReq) (*HelloRes, error)
	mustEmbedUnimplementedTestAPIServer()
}

// UnimplementedTestAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTestAPIServer struct {
}

func (UnimplementedTestAPIServer) Hello(context.Context, *HelloReq) (*HelloRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedTestAPIServer) mustEmbedUnimplementedTestAPIServer() {}

// UnsafeTestAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAPIServer will
// result in compilation errors.
type UnsafeTestAPIServer interface {
	mustEmbedUnimplementedTestAPIServer()
}

func RegisterTestAPIServer(s grpc.ServiceRegistrar, srv TestAPIServer) {
	s.RegisterService(&TestAPI_ServiceDesc, srv)
}

func _TestAPI_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.TestAPI/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestAPI_ServiceDesc is the grpc.ServiceDesc for TestAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Core.TestAPI",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _TestAPI_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/core.proto",
}

// CoreAPIClient is the client API for CoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreAPIClient interface {
	//rpc LogInfo(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogDebug(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogWarning(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogError(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogColored(google.protobuf.StringValue) returns(google.protobuf.Empty);
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Pointer, error)
	// TODO:
	//rpc CreateCheckpoint(google.protobuf.Empty) returns (Pointer);
	CreateVoiceChannel(ctx context.Context, in *CreateVoiceChannelRequest, opts ...grpc.CallOption) (*Pointer, error)
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetBranch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	IsDebug(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Hash(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	FileExists(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	FileRead(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type coreAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreAPIClient(cc grpc.ClientConnInterface) CoreAPIClient {
	return &coreAPIClient{cc}
}

func (c *coreAPIClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Pointer, error) {
	out := new(Pointer)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/CreateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateVoiceChannel(ctx context.Context, in *CreateVoiceChannelRequest, opts ...grpc.CallOption) (*Pointer, error) {
	out := new(Pointer)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/CreateVoiceChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetBranch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) IsDebug(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/IsDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) Hash(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/Hash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) FileExists(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/FileExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) FileRead(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/FileRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreAPIServer is the server API for CoreAPI service.
// All implementations must embed UnimplementedCoreAPIServer
// for forward compatibility
type CoreAPIServer interface {
	//rpc LogInfo(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogDebug(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogWarning(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogError(google.protobuf.StringValue) returns(google.protobuf.Empty);
	//rpc LogColored(google.protobuf.StringValue) returns(google.protobuf.Empty);
	CreateVehicle(context.Context, *CreateVehicleRequest) (*Pointer, error)
	// TODO:
	//rpc CreateCheckpoint(google.protobuf.Empty) returns (Pointer);
	CreateVoiceChannel(context.Context, *CreateVoiceChannelRequest) (*Pointer, error)
	GetVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	GetBranch(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	IsDebug(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	Hash(context.Context, *wrapperspb.StringValue) (*wrapperspb.UInt64Value, error)
	FileExists(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	FileRead(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedCoreAPIServer()
}

// UnimplementedCoreAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoreAPIServer struct {
}

func (UnimplementedCoreAPIServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*Pointer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedCoreAPIServer) CreateVoiceChannel(context.Context, *CreateVoiceChannelRequest) (*Pointer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoiceChannel not implemented")
}
func (UnimplementedCoreAPIServer) GetVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedCoreAPIServer) GetBranch(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedCoreAPIServer) IsDebug(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDebug not implemented")
}
func (UnimplementedCoreAPIServer) Hash(context.Context, *wrapperspb.StringValue) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hash not implemented")
}
func (UnimplementedCoreAPIServer) FileExists(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileExists not implemented")
}
func (UnimplementedCoreAPIServer) FileRead(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRead not implemented")
}
func (UnimplementedCoreAPIServer) mustEmbedUnimplementedCoreAPIServer() {}

// UnsafeCoreAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreAPIServer will
// result in compilation errors.
type UnsafeCoreAPIServer interface {
	mustEmbedUnimplementedCoreAPIServer()
}

func RegisterCoreAPIServer(s grpc.ServiceRegistrar, srv CoreAPIServer) {
	s.RegisterService(&CoreAPI_ServiceDesc, srv)
}

func _CoreAPI_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/CreateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateVoiceChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoiceChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateVoiceChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/CreateVoiceChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateVoiceChannel(ctx, req.(*CreateVoiceChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetBranch(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_IsDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).IsDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/IsDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).IsDebug(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/Hash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).Hash(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_FileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).FileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/FileExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).FileExists(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_FileRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).FileRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/FileRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).FileRead(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreAPI_ServiceDesc is the grpc.ServiceDesc for CoreAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Core.CoreAPI",
	HandlerType: (*CoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVehicle",
			Handler:    _CoreAPI_CreateVehicle_Handler,
		},
		{
			MethodName: "CreateVoiceChannel",
			Handler:    _CoreAPI_CreateVoiceChannel_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _CoreAPI_GetVersion_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _CoreAPI_GetBranch_Handler,
		},
		{
			MethodName: "IsDebug",
			Handler:    _CoreAPI_IsDebug_Handler,
		},
		{
			MethodName: "Hash",
			Handler:    _CoreAPI_Hash_Handler,
		},
		{
			MethodName: "FileExists",
			Handler:    _CoreAPI_FileExists_Handler,
		},
		{
			MethodName: "FileRead",
			Handler:    _CoreAPI_FileRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/core.proto",
}
