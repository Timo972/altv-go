// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: src/core.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreAPIClient is the client API for CoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreAPIClient interface {
	LogInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogDebug(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogWarning(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogError(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogColored(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Pointer, error)
	// TODO:
	CreateCheckpoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pointer, error)
	CreateVoiceChannel(ctx context.Context, in *CreateVoiceChannelRequest, opts ...grpc.CallOption) (*Pointer, error)
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetBranch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	IsDebug(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Hash(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	FileExists(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	FileRead(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetEntityByID(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*BaseObject, error)
	// TODO:
	GetEntities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVehicles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HasMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MValue, error)
	SetMetaData(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HasSyncedMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetSyncedMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MValue, error)
	SetSyncedMetaData(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMetaSyncedData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DestroyBaseObject(ctx context.Context, in *Pointer, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRootDirectory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	StartResource(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	StopResource(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RestartResource(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// TODO:
	GetRequiredPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOptionalPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlayersByName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNetTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	GetSDKHash(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// TODO:
	CreateColShape(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVehicleModelByHash(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*VehicleModelInfo, error)
	GetResourceByName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Pointer, error)
	HashServerPassword(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	StopServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type coreAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreAPIClient(cc grpc.ClientConnInterface) CoreAPIClient {
	return &coreAPIClient{cc}
}

func (c *coreAPIClient) LogInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/LogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) LogDebug(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/LogDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) LogWarning(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/LogWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) LogError(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/LogError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) LogColored(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/LogColored", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Pointer, error) {
	out := new(Pointer)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/CreateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateCheckpoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pointer, error) {
	out := new(Pointer)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/CreateCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateVoiceChannel(ctx context.Context, in *CreateVoiceChannelRequest, opts ...grpc.CallOption) (*Pointer, error) {
	out := new(Pointer)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/CreateVoiceChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetBranch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) IsDebug(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/IsDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) Hash(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/Hash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) FileExists(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/FileExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) FileRead(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/FileRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetEntityByID(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*BaseObject, error) {
	out := new(BaseObject)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetEntityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetEntities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetPlayers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetVehicles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetVehicles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) HasMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/HasMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MValue, error) {
	out := new(MValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetMetaData(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/SetMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/DeleteMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) HasSyncedMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/HasSyncedMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetSyncedMetaData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*MValue, error) {
	out := new(MValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetSyncedMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetSyncedMetaData(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/SetSyncedMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteMetaSyncedData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/DeleteMetaSyncedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DestroyBaseObject(ctx context.Context, in *Pointer, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/DestroyBaseObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetRootDirectory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetRootDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) StartResource(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/StartResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) StopResource(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/StopResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) RestartResource(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/RestartResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetRequiredPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetRequiredPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetOptionalPermissions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetOptionalPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetPlayersByName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetPlayersByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNetTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetNetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetSDKHash(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetSDKHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateColShape(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/CreateColShape", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetVehicleModelByHash(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*VehicleModelInfo, error) {
	out := new(VehicleModelInfo)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetVehicleModelByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetResourceByName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Pointer, error) {
	out := new(Pointer)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/GetResourceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) HashServerPassword(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/HashServerPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) StopServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Core.CoreAPI/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreAPIServer is the server API for CoreAPI service.
// All implementations must embed UnimplementedCoreAPIServer
// for forward compatibility
type CoreAPIServer interface {
	LogInfo(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LogDebug(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LogWarning(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LogError(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LogColored(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	CreateVehicle(context.Context, *CreateVehicleRequest) (*Pointer, error)
	// TODO:
	CreateCheckpoint(context.Context, *emptypb.Empty) (*Pointer, error)
	CreateVoiceChannel(context.Context, *CreateVoiceChannelRequest) (*Pointer, error)
	GetVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	GetBranch(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	IsDebug(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	Hash(context.Context, *wrapperspb.StringValue) (*wrapperspb.UInt64Value, error)
	FileExists(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	FileRead(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	GetEntityByID(context.Context, *wrapperspb.UInt32Value) (*BaseObject, error)
	// TODO:
	GetEntities(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetPlayers(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetVehicles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	HasMetaData(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	GetMetaData(context.Context, *wrapperspb.StringValue) (*MValue, error)
	SetMetaData(context.Context, *SetMetaRequest) (*emptypb.Empty, error)
	DeleteMetaData(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	HasSyncedMetaData(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	GetSyncedMetaData(context.Context, *wrapperspb.StringValue) (*MValue, error)
	SetSyncedMetaData(context.Context, *SetMetaRequest) (*emptypb.Empty, error)
	DeleteMetaSyncedData(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	DestroyBaseObject(context.Context, *Pointer) (*emptypb.Empty, error)
	GetRootDirectory(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	StartResource(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	StopResource(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	RestartResource(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	// TODO:
	GetRequiredPermissions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetOptionalPermissions(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetPlayersByName(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetNetTime(context.Context, *emptypb.Empty) (*wrapperspb.UInt32Value, error)
	GetSDKHash(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	// TODO:
	CreateColShape(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetVehicleModelByHash(context.Context, *wrapperspb.UInt32Value) (*VehicleModelInfo, error)
	GetResourceByName(context.Context, *wrapperspb.StringValue) (*Pointer, error)
	HashServerPassword(context.Context, *wrapperspb.StringValue) (*wrapperspb.UInt64Value, error)
	StopServer(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCoreAPIServer()
}

// UnimplementedCoreAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoreAPIServer struct {
}

func (UnimplementedCoreAPIServer) LogInfo(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInfo not implemented")
}
func (UnimplementedCoreAPIServer) LogDebug(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogDebug not implemented")
}
func (UnimplementedCoreAPIServer) LogWarning(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogWarning not implemented")
}
func (UnimplementedCoreAPIServer) LogError(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogError not implemented")
}
func (UnimplementedCoreAPIServer) LogColored(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogColored not implemented")
}
func (UnimplementedCoreAPIServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*Pointer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedCoreAPIServer) CreateCheckpoint(context.Context, *emptypb.Empty) (*Pointer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (UnimplementedCoreAPIServer) CreateVoiceChannel(context.Context, *CreateVoiceChannelRequest) (*Pointer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoiceChannel not implemented")
}
func (UnimplementedCoreAPIServer) GetVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedCoreAPIServer) GetBranch(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedCoreAPIServer) IsDebug(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDebug not implemented")
}
func (UnimplementedCoreAPIServer) Hash(context.Context, *wrapperspb.StringValue) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hash not implemented")
}
func (UnimplementedCoreAPIServer) FileExists(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileExists not implemented")
}
func (UnimplementedCoreAPIServer) FileRead(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRead not implemented")
}
func (UnimplementedCoreAPIServer) GetEntityByID(context.Context, *wrapperspb.UInt32Value) (*BaseObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByID not implemented")
}
func (UnimplementedCoreAPIServer) GetEntities(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntities not implemented")
}
func (UnimplementedCoreAPIServer) GetPlayers(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedCoreAPIServer) GetVehicles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicles not implemented")
}
func (UnimplementedCoreAPIServer) HasMetaData(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasMetaData not implemented")
}
func (UnimplementedCoreAPIServer) GetMetaData(context.Context, *wrapperspb.StringValue) (*MValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaData not implemented")
}
func (UnimplementedCoreAPIServer) SetMetaData(context.Context, *SetMetaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetaData not implemented")
}
func (UnimplementedCoreAPIServer) DeleteMetaData(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaData not implemented")
}
func (UnimplementedCoreAPIServer) HasSyncedMetaData(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasSyncedMetaData not implemented")
}
func (UnimplementedCoreAPIServer) GetSyncedMetaData(context.Context, *wrapperspb.StringValue) (*MValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncedMetaData not implemented")
}
func (UnimplementedCoreAPIServer) SetSyncedMetaData(context.Context, *SetMetaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSyncedMetaData not implemented")
}
func (UnimplementedCoreAPIServer) DeleteMetaSyncedData(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaSyncedData not implemented")
}
func (UnimplementedCoreAPIServer) DestroyBaseObject(context.Context, *Pointer) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyBaseObject not implemented")
}
func (UnimplementedCoreAPIServer) GetRootDirectory(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootDirectory not implemented")
}
func (UnimplementedCoreAPIServer) StartResource(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartResource not implemented")
}
func (UnimplementedCoreAPIServer) StopResource(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopResource not implemented")
}
func (UnimplementedCoreAPIServer) RestartResource(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartResource not implemented")
}
func (UnimplementedCoreAPIServer) GetRequiredPermissions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequiredPermissions not implemented")
}
func (UnimplementedCoreAPIServer) GetOptionalPermissions(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionalPermissions not implemented")
}
func (UnimplementedCoreAPIServer) GetPlayersByName(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersByName not implemented")
}
func (UnimplementedCoreAPIServer) GetNetTime(context.Context, *emptypb.Empty) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetTime not implemented")
}
func (UnimplementedCoreAPIServer) GetSDKHash(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSDKHash not implemented")
}
func (UnimplementedCoreAPIServer) CreateColShape(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColShape not implemented")
}
func (UnimplementedCoreAPIServer) GetVehicleModelByHash(context.Context, *wrapperspb.UInt32Value) (*VehicleModelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleModelByHash not implemented")
}
func (UnimplementedCoreAPIServer) GetResourceByName(context.Context, *wrapperspb.StringValue) (*Pointer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByName not implemented")
}
func (UnimplementedCoreAPIServer) HashServerPassword(context.Context, *wrapperspb.StringValue) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashServerPassword not implemented")
}
func (UnimplementedCoreAPIServer) StopServer(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedCoreAPIServer) mustEmbedUnimplementedCoreAPIServer() {}

// UnsafeCoreAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreAPIServer will
// result in compilation errors.
type UnsafeCoreAPIServer interface {
	mustEmbedUnimplementedCoreAPIServer()
}

func RegisterCoreAPIServer(s grpc.ServiceRegistrar, srv CoreAPIServer) {
	s.RegisterService(&CoreAPI_ServiceDesc, srv)
}

func _CoreAPI_LogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).LogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/LogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).LogInfo(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_LogDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).LogDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/LogDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).LogDebug(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_LogWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).LogWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/LogWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).LogWarning(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/LogError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).LogError(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_LogColored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).LogColored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/LogColored",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).LogColored(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/CreateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/CreateCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateCheckpoint(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateVoiceChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoiceChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateVoiceChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/CreateVoiceChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateVoiceChannel(ctx, req.(*CreateVoiceChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetBranch(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_IsDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).IsDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/IsDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).IsDebug(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/Hash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).Hash(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_FileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).FileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/FileExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).FileExists(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_FileRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).FileRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/FileRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).FileRead(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetEntityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetEntityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetEntityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetEntityByID(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetEntities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetPlayers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetVehicles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_HasMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).HasMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/HasMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).HasMetaData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetMetaData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/SetMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetMetaData(ctx, req.(*SetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/DeleteMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteMetaData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_HasSyncedMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).HasSyncedMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/HasSyncedMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).HasSyncedMetaData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetSyncedMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetSyncedMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetSyncedMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetSyncedMetaData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetSyncedMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetSyncedMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/SetSyncedMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetSyncedMetaData(ctx, req.(*SetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteMetaSyncedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteMetaSyncedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/DeleteMetaSyncedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteMetaSyncedData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DestroyBaseObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pointer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DestroyBaseObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/DestroyBaseObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DestroyBaseObject(ctx, req.(*Pointer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetRootDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetRootDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetRootDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetRootDirectory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_StartResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).StartResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/StartResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).StartResource(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_StopResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).StopResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/StopResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).StopResource(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_RestartResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).RestartResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/RestartResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).RestartResource(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetRequiredPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetRequiredPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetRequiredPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetRequiredPermissions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetOptionalPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetOptionalPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetOptionalPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetOptionalPermissions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetPlayersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetPlayersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetPlayersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetPlayersByName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetNetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNetTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetSDKHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetSDKHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetSDKHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetSDKHash(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateColShape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateColShape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/CreateColShape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateColShape(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetVehicleModelByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetVehicleModelByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetVehicleModelByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetVehicleModelByHash(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetResourceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetResourceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/GetResourceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetResourceByName(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_HashServerPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).HashServerPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/HashServerPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).HashServerPassword(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core.CoreAPI/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).StopServer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreAPI_ServiceDesc is the grpc.ServiceDesc for CoreAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Core.CoreAPI",
	HandlerType: (*CoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogInfo",
			Handler:    _CoreAPI_LogInfo_Handler,
		},
		{
			MethodName: "LogDebug",
			Handler:    _CoreAPI_LogDebug_Handler,
		},
		{
			MethodName: "LogWarning",
			Handler:    _CoreAPI_LogWarning_Handler,
		},
		{
			MethodName: "LogError",
			Handler:    _CoreAPI_LogError_Handler,
		},
		{
			MethodName: "LogColored",
			Handler:    _CoreAPI_LogColored_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _CoreAPI_CreateVehicle_Handler,
		},
		{
			MethodName: "CreateCheckpoint",
			Handler:    _CoreAPI_CreateCheckpoint_Handler,
		},
		{
			MethodName: "CreateVoiceChannel",
			Handler:    _CoreAPI_CreateVoiceChannel_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _CoreAPI_GetVersion_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _CoreAPI_GetBranch_Handler,
		},
		{
			MethodName: "IsDebug",
			Handler:    _CoreAPI_IsDebug_Handler,
		},
		{
			MethodName: "Hash",
			Handler:    _CoreAPI_Hash_Handler,
		},
		{
			MethodName: "FileExists",
			Handler:    _CoreAPI_FileExists_Handler,
		},
		{
			MethodName: "FileRead",
			Handler:    _CoreAPI_FileRead_Handler,
		},
		{
			MethodName: "GetEntityByID",
			Handler:    _CoreAPI_GetEntityByID_Handler,
		},
		{
			MethodName: "GetEntities",
			Handler:    _CoreAPI_GetEntities_Handler,
		},
		{
			MethodName: "GetPlayers",
			Handler:    _CoreAPI_GetPlayers_Handler,
		},
		{
			MethodName: "GetVehicles",
			Handler:    _CoreAPI_GetVehicles_Handler,
		},
		{
			MethodName: "HasMetaData",
			Handler:    _CoreAPI_HasMetaData_Handler,
		},
		{
			MethodName: "GetMetaData",
			Handler:    _CoreAPI_GetMetaData_Handler,
		},
		{
			MethodName: "SetMetaData",
			Handler:    _CoreAPI_SetMetaData_Handler,
		},
		{
			MethodName: "DeleteMetaData",
			Handler:    _CoreAPI_DeleteMetaData_Handler,
		},
		{
			MethodName: "HasSyncedMetaData",
			Handler:    _CoreAPI_HasSyncedMetaData_Handler,
		},
		{
			MethodName: "GetSyncedMetaData",
			Handler:    _CoreAPI_GetSyncedMetaData_Handler,
		},
		{
			MethodName: "SetSyncedMetaData",
			Handler:    _CoreAPI_SetSyncedMetaData_Handler,
		},
		{
			MethodName: "DeleteMetaSyncedData",
			Handler:    _CoreAPI_DeleteMetaSyncedData_Handler,
		},
		{
			MethodName: "DestroyBaseObject",
			Handler:    _CoreAPI_DestroyBaseObject_Handler,
		},
		{
			MethodName: "GetRootDirectory",
			Handler:    _CoreAPI_GetRootDirectory_Handler,
		},
		{
			MethodName: "StartResource",
			Handler:    _CoreAPI_StartResource_Handler,
		},
		{
			MethodName: "StopResource",
			Handler:    _CoreAPI_StopResource_Handler,
		},
		{
			MethodName: "RestartResource",
			Handler:    _CoreAPI_RestartResource_Handler,
		},
		{
			MethodName: "GetRequiredPermissions",
			Handler:    _CoreAPI_GetRequiredPermissions_Handler,
		},
		{
			MethodName: "GetOptionalPermissions",
			Handler:    _CoreAPI_GetOptionalPermissions_Handler,
		},
		{
			MethodName: "GetPlayersByName",
			Handler:    _CoreAPI_GetPlayersByName_Handler,
		},
		{
			MethodName: "GetNetTime",
			Handler:    _CoreAPI_GetNetTime_Handler,
		},
		{
			MethodName: "GetSDKHash",
			Handler:    _CoreAPI_GetSDKHash_Handler,
		},
		{
			MethodName: "CreateColShape",
			Handler:    _CoreAPI_CreateColShape_Handler,
		},
		{
			MethodName: "GetVehicleModelByHash",
			Handler:    _CoreAPI_GetVehicleModelByHash_Handler,
		},
		{
			MethodName: "GetResourceByName",
			Handler:    _CoreAPI_GetResourceByName_Handler,
		},
		{
			MethodName: "HashServerPassword",
			Handler:    _CoreAPI_HashServerPassword_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _CoreAPI_StopServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/core.proto",
}
