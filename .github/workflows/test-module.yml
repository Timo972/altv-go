name: Test Go Module
on: 
  push:
    paths:
      - "runtime/*"
  pull_request:
    paths:
      - "runtime/*"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      - name: Git LFS Pull
        run: git lfs pull

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.19.4"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          mkdir build
          pushd build
          cmake -G"Visual Studio 16" -A x64 -DGO_MODULE_VERSION=%VERSION% ..
          cmake --build . --config Release
          popd
          mkdir dist\go-module
          copy bin\Release\go-module.dll dist\go-module
        env:
          VERSION: 0.1.0-dev.1
        working-directory: ./runtime

      - name: Build
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install gcc-8 g++-8
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++-8 -DGO_MODULE_VERSION=%VERSION% ..
          cmake --build . --config Release
          cd ..
          mkdir -p dist/go-module
          cp ./bin/libgo-module.so dist/go-module
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        working-directory: ./runtime
